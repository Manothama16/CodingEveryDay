// Kth smallest element 

naive - O(n ^ 2)
efficient - O(log n)
/*
  - The idea is to use partitioning function of the quick sort algo 
  - If the pivot is less than K then search for K in the right half else left half 
  - If the pivot matches K then return ... 
*/

public static void kthSmallest(int arr[] , int k)
	{
		int l = 0 , h = arr.length -1 ;
		int pivot  = lomutoPartition(arr , l , h);
		
		while(pivot != k-1)
		{
			if(pivot > k-1)
			{
				pivot = lomutoPartition(arr, l , pivot  - 1);
			}
			else if (pivot < k - 1)
			{
				pivot = lomutoPartition(arr , pivot + 1 , h);
			}
			
		}
		
		System.out.println(arr[k-1]);
	}
