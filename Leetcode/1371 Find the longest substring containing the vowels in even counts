
import java.util.HashMap;

class Solution {
    public int findTheLongestSubstring(String s) {

    HashMap<Integer , Integer> map = new HashMap<>();
    int res = 0;
    int mask = 0;        
    map.put(0,-1);
    for(int i = 0 ; i < s.length(); i++)
    {
        char ch = s.charAt(i);
        if(ch == 'a')
        {
            mask ^= (1 << 0);
        }
        else if (ch == 'e') mask ^= (1 << 1);
        else if (ch == 'i') mask ^= (1 << 2);
        else if (ch == 'o') mask ^= (1 << 3);
        else if (ch == 'u') mask ^= (1 << 4);

        if(map.containsKey(mask))
        {
            res = Math.max(res , i - map.get(mask));
        }
        else{
            map.put(mask , i);
        }

    }

        return res;
    }
}

// Tried solving this problem about 40 minutes or so then I could cleary see i as literally struck with only one thought , eventually gave up and it says use bit manipulation 
// It's really a such a nice trick to learn...

